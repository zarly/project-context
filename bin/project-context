#!/usr/bin/env node

const path = require('path');

(async () => {
  const args = process.argv.slice(2);
  const dir = args[0];

  let mod;
  try {
    // try compiled JS first
    mod = require(path.join(__dirname, '..', 'projectContext.js'));
  } catch (e1) {
    try {
      // try to load TS via ts-node if available
      require('ts-node/register');
      mod = require(path.join(__dirname, '..', 'projectContext.ts'));
    } catch (e2) {
      console.error('Unable to load projectContext. Run `npm run build` or install `ts-node`.');
      process.exit(1);
    }
  }

  const projectContext = mod.projectContext || mod.default;
  if (typeof projectContext !== 'function') {
    console.error('projectContext export not found');
    process.exit(1);
  }

  try {
    const out = await projectContext(dir, { limit: 1_000_000 });

    // write to stdout
    process.stdout.write(out);

    // try to copy to clipboard
    let copied = false;

    try {
      // prefer clipboardy if installed
      try {
        const clipboardy = require('clipboardy');
        // prefer synchronous write to avoid hanging
        if (clipboardy && typeof clipboardy.writeSync === 'function') {
          clipboardy.writeSync(out);
        } else if (clipboardy && typeof clipboardy.write === 'function') {
          await clipboardy.write(out);
        }
        copied = true;
      } catch (err) {
        // fallback to platform utilities
        const { spawnSync } = require('child_process');
        const platform = process.platform;
        if (platform === 'darwin') {
          const p = spawnSync('pbcopy', [], { input: out, encoding: 'utf8' });
          if (p.status === 0) copied = true;
        } else if (platform === 'win32') {
          const p = spawnSync('clip', [], { input: out, encoding: 'utf8' });
          if (p.status === 0) copied = true;
        } else {
          // try xclip and xsel
          let p = spawnSync('xclip', ['-selection', 'clipboard'], { input: out, encoding: 'utf8' });
          if (p.status === 0) copied = true;
          else {
            p = spawnSync('xsel', ['--clipboard', '--input'], { input: out, encoding: 'utf8' });
            if (p.status === 0) copied = true;
          }
        }
      }
    } catch (e) {
      // ignore clipboard errors
    }

    if (copied) {
      // send notice to stderr to avoid polluting stdout
      console.error('Output also copied to clipboard');
    } else {
      console.error('Output NOT copied to clipboard. Install "clipboardy" or ensure pbcopy/clip/xclip/xsel is available.');
    }
  } catch (err) {
    console.error('Error generating project context:', err && err.message ? err.message : err);
    process.exit(1);
  }
})();
